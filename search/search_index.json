{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to gtlparser","text":"<p>A python package for Google Time Line data analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://GGweelplay.github.io/gtlparser</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Parse Google Time Line JSON to GEOJSON</li> <li>Great too for GIS</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#gtlparser.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>gtlparser/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/GGweelplay/gtlparser/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>gtlparser could always use more documentation, whether as part of the official gtlparser docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/GGweelplay/gtlparser/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up gtlparser for local development.</p> <ol> <li> <p>Fork the gtlparser repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/gtlparser.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv gtlparser\n$ cd gtlparser/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 gtlparser tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/GGweelplay/gtlparser/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>This module provides a custom Map class that extends folium.Map</p>"},{"location":"foliumap/#gtlparser.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom Map class that inherits from folium.Map and adds additional functionalities for basemap support, layer control, and vector data handling.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"\n    A custom Map class that inherits from folium.Map and adds additional\n    functionalities for basemap support, layer control, and vector data handling.\n    \"\"\"\n\n    def __init__(self, location=[20, 0], zoom_start=2, **kwargs):\n        \"\"\"\n        Initializes the Map object, inherits from folium.Map.\n\n        Args:\n            location (list): Initial location of the map [latitude, longitude].\n            zoom_start (int): Initial zoom level of the map.\n            **kwargs: Additional keyword arguments to pass to folium.Map.\n        \"\"\"\n        super().__init__(location=location, zoom_start=zoom_start, **kwargs)\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n            basemap_name (str): The name of the basemap to be added.\n                Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.\n\n        Returns:\n            None: Adds the basemap to the map.\n        \"\"\"\n        folium.TileLayer(basemap).add_to(self)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"\n        Adds vector data (GeoJSON/Shapefile) to the map.\n\n        Args:\n            data (str or GeoDataFrame): The vector data to be added to the map.\n                Can be a file path (str) or a GeoDataFrame.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type.\")\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the map to manage different layers.\n\n        Args:\n            None\n\n        Returns:\n            None: Adds a layer control widget to the map.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n\n    def add_geojson(self, data, **kwargs):\n        \"\"\"\n        Adds GeoJSON data to the map.\n\n        Args:\n            data (str or dict): The GeoJson data. Can be a file path (str) or a dictionary.\n            **kwargs: Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n\n        geojson = folium.GeoJson(data=geojson, **kwargs)\n        geojson.add_to(self)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"\n        Adds shapefile data to the map.\n\n        Args:\n            data (str): The path to the shapefile.\n            **kwargs: Additional keyword arguments for folium.GeoJson.\n\n        Returns:\n            None: Adds the shapefile data to the map.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"\n        Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (GeoDataFrame): The GeoDataFrame to be added to the map.\n            **kwargs: Additional keyword arguments for folium.GeoJson.\n\n        Returns:\n            None: Adds the GeoDataFrame to the map.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n        \"\"\"\n        Adds a split map to the map.\n\n        Args:\n            left (folium.Map): The left map to be added.\n            right (folium.Map): The right map to be added.\n            **kwargs: Additional keyword arguments for folium.SplitMap.\n\n        Returns:\n            None: Adds the split map to the map.\n        \"\"\"\n\n        # Directly pass the 'left' and 'right' arguments (URLs or file paths)\n        # to get_leaflet_tile_layer\n\n        import os\n        from localtileserver import get_folium_tile_layer\n        import folium\n        from folium import plugins\n\n        if left.startswith(\"http\") or os.path.exists(left):\n            layer_left = get_folium_tile_layer(left, **kwargs)\n        else:\n            layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n\n        if right.startswith(\"http\") or os.path.exists(right):\n            layer_right = get_folium_tile_layer(right, **kwargs)\n        else:\n            layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n        sbs = folium = plugins.SideBySideLayers(\n            layer_left=layer_left, layer_right=layer_right\n        )\n\n        layer_left.add_to(self)\n        layer_right.add_to(self)\n        sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.__init__","title":"<code>__init__(self, location=[20, 0], zoom_start=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object, inherits from folium.Map.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>list</code> <p>Initial location of the map [latitude, longitude].</p> <code>[20, 0]</code> <code>zoom_start</code> <code>int</code> <p>Initial zoom level of the map.</p> <code>2</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to folium.Map.</p> <code>{}</code> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def __init__(self, location=[20, 0], zoom_start=2, **kwargs):\n    \"\"\"\n    Initializes the Map object, inherits from folium.Map.\n\n    Args:\n        location (list): Initial location of the map [latitude, longitude].\n        zoom_start (int): Initial zoom level of the map.\n        **kwargs: Additional keyword arguments to pass to folium.Map.\n    \"\"\"\n    super().__init__(location=location, zoom_start=zoom_start, **kwargs)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>The name of the basemap to be added. Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Adds the basemap to the map.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n        basemap_name (str): The name of the basemap to be added.\n            Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.\n\n    Returns:\n        None: Adds the basemap to the map.\n    \"\"\"\n    folium.TileLayer(basemap).add_to(self)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>The GeoDataFrame to be added to the map.</p> required <code>**kwargs</code> <p>Additional keyword arguments for folium.GeoJson.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Adds the GeoDataFrame to the map.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"\n    Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (GeoDataFrame): The GeoDataFrame to be added to the map.\n        **kwargs: Additional keyword arguments for folium.GeoJson.\n\n    Returns:\n        None: Adds the GeoDataFrame to the map.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJson data. Can be a file path (str) or a dictionary.</p> required <code>**kwargs</code> <p>Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n    \"\"\"\n    Adds GeoJSON data to the map.\n\n    Args:\n        data (str or dict): The GeoJson data. Can be a file path (str) or a dictionary.\n        **kwargs: Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n\n    geojson = folium.GeoJson(data=geojson, **kwargs)\n    geojson.add_to(self)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map to manage different layers.</p> <p>Returns:</p> Type Description <code>None</code> <p>Adds a layer control widget to the map.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the map to manage different layers.\n\n    Args:\n        None\n\n    Returns:\n        None: Adds a layer control widget to the map.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds shapefile data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for folium.GeoJson.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Adds the shapefile data to the map.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"\n    Adds shapefile data to the map.\n\n    Args:\n        data (str): The path to the shapefile.\n        **kwargs: Additional keyword arguments for folium.GeoJson.\n\n    Returns:\n        None: Adds the shapefile data to the map.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_split_map","title":"<code>add_split_map(self, left='openstreetmap', right='cartodbpositron', **kwargs)</code>","text":"<p>Adds a split map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>folium.Map</code> <p>The left map to be added.</p> <code>'openstreetmap'</code> <code>right</code> <code>folium.Map</code> <p>The right map to be added.</p> <code>'cartodbpositron'</code> <code>**kwargs</code> <p>Additional keyword arguments for folium.SplitMap.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>Adds the split map to the map.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_split_map(self, left=\"openstreetmap\", right=\"cartodbpositron\", **kwargs):\n    \"\"\"\n    Adds a split map to the map.\n\n    Args:\n        left (folium.Map): The left map to be added.\n        right (folium.Map): The right map to be added.\n        **kwargs: Additional keyword arguments for folium.SplitMap.\n\n    Returns:\n        None: Adds the split map to the map.\n    \"\"\"\n\n    # Directly pass the 'left' and 'right' arguments (URLs or file paths)\n    # to get_leaflet_tile_layer\n\n    import os\n    from localtileserver import get_folium_tile_layer\n    import folium\n    from folium import plugins\n\n    if left.startswith(\"http\") or os.path.exists(left):\n        layer_left = get_folium_tile_layer(left, **kwargs)\n    else:\n        layer_left = folium.TileLayer(left, overlay=True, **kwargs)\n\n    if right.startswith(\"http\") or os.path.exists(right):\n        layer_right = get_folium_tile_layer(right, **kwargs)\n    else:\n        layer_right = folium.TileLayer(right, overlay=True, **kwargs)\n\n    sbs = folium = plugins.SideBySideLayers(\n        layer_left=layer_left, layer_right=layer_right\n    )\n\n    layer_left.add_to(self)\n    layer_right.add_to(self)\n    sbs.add_to(self)\n</code></pre>"},{"location":"foliumap/#gtlparser.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data (GeoJSON/Shapefile) to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or GeoDataFrame</code> <p>The vector data to be added to the map. Can be a file path (str) or a GeoDataFrame.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>gtlparser/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"\n    Adds vector data (GeoJSON/Shapefile) to the map.\n\n    Args:\n        data (str or GeoDataFrame): The vector data to be added to the map.\n            Can be a file path (str) or a GeoDataFrame.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type.\")\n</code></pre>"},{"location":"gtlparser/","title":"gtlparser module","text":"<p>Main module.</p>"},{"location":"gtlparser/#gtlparser.gtlparser.Map","title":"<code> Map            (Map)         </code>","text":"<p>A custom Map class that inherits from ipyleaflet.Map and adds additional functionalities for basemap support, layer control, and vector data handling.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"\n    A custom Map class that inherits from ipyleaflet.Map and adds additional\n    functionalities for basemap support, layer control, and vector data handling.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"\n        Initializes the Map object, inherits from ipyleaflet.Map.\n\n        Args:\n            center (list): Initial center of the map [latitude, longitude].\n            zoom (int): Initial zoom level of the map.\n            height (str): Height of the map in CSS units (e.g., \"600px\").\n            **kwargs: Additional keyword arguments to pass to ipyleaflet.Map.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap\", **kwargs):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n            basemap_name (str): The name of the basemap to be added.\n                Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.\n            **kwargs: Additional keyword arguments to pass to ipyleaflet.TileLayer.\n\n        Raises:\n            ValueError: If the provided basemap_name is not found.\n\n        Returns:\n            None: Adds the basemap to the map.\n        \"\"\"\n        import xyzservices\n\n        try:\n            xyzservices_return = eval(f\"ipyleaflet.basemaps.{basemap}\")\n            if type(xyzservices_return) == xyzservices.lib.TileProvider:\n                url = xyzservices_return.build_url()\n            elif type(xyzservices_return) == xyzservices.lib.Bunch:\n                subset = kwargs.get(\"subset\")\n                if subset is None:\n                    subset = list(xyzservices_return.keys())[0]\n                url = eval(f\"ipyleaflet.basemaps.{basemap}.{subset}\").build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap + subset)\n            self.add(layer)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found in ipyleaflet basemaps.\")\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):\n        \"\"\"\n        Adds a GUI for selecting basemaps to the map.\n        Args:\n            options (list): List of available basemaps to choose from.\n                If None, defaults to a predefined list.\n            position (str): Position of the widget on the map.\n                Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.\n\n        Behavior:\n            - A toggle button to show/hide the dropdown and close button.\n            - A dropdown menu to select the basemap.\n            - A close button to remove the widget from the map.\n\n        Events handlers:\n            - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n            - `on_button_click`: Closes the widget when the close button is clicked.\n            - `on_dropdown_change`: Changes the basemap when a new option is selected.\n        \"\"\"\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            button_style=\"\",\n            tooltip=\"Click me\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        dropdown = widgets.Dropdown(\n            options=options,\n            value=options[0],\n            description=\"Basemap: \",\n            style={\"description_width\": \"initial\"},\n        )\n        dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n        button = widgets.Button(\n            icon=\"times\",\n        )\n        button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        hbox = widgets.HBox([toggle, dropdown, button])\n\n        def on_toggle_change(change):\n            if change[\"new\"]:\n                hbox.children = [toggle, dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            hbox.close()\n            toggle.close()\n            dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        def on_dropdown_change(change):\n            if change[\"new\"]:\n                self.layers = self.layers[:-2]\n                self.add_basemap(change[\"new\"])\n\n        dropdown.observe(on_dropdown_change, names=\"value\")\n\n        control = ipyleaflet.WidgetControl(weidth=hbox, position=position)\n        self.add(control)\n\n    def add_widget(self, widget, position=\"topright\", **kwargs):\n        \"\"\"\n        Adds a widget to the map.\n\n        Args:\n            widget (ipywidgets.Widget): The widget to be added to the map.\n            position (str): Position of the widget on the map.\n                Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.\n            **kwargs: Additional keyword arguments for ipyleaflet.WidgetControl.\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n        self.add(control)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the map to manage different layers.\n\n        Args:\n            None\n\n        Returns:\n            None: Adds a layer control widget to the map.\n        \"\"\"\n        layer_control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(layer_control)\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"\n        Adds vector data (GeoJSON/Shapefile) to the map.\n\n        Args:\n            data (str or GeoDataFrame): The vector data to be added to the map.\n                Can be a file path (str) or a GeoDataFrame.\n            **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            self.add_gdf(gdf, **kwargs)\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_gdf(data, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, **kwargs)\n        else:\n            raise ValueError(\"Invalid data type.\")\n\n    def add_google_maps(self, map_type=\"ROADMAP\"):\n        \"\"\"\n        Adds Google Maps basemap to the map.\n\n        Args:\n            map_type (str): The type of Google Maps to be added.\n                Options: 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN'.\n\n        Returns:\n            None: Adds the Google Maps basemap to the map.\n        \"\"\"\n        map_types = {\n            \"ROADMAP\": \"m\",\n            \"SATELLITE\": \"s\",\n            \"HYBRID\": \"y\",\n            \"TERRAIN\": \"p\",\n        }\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Maps\")\n        self.add(layer)\n\n    def add_geojson(self, data, hover_style=None, **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str or dict): The GeoJson data. Can be a file path (str) or a dictionary.\n            hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n            **kwargs: Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.\n\n        Raises:\n            ValueError: If the data type is invalid\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson = data\n        layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, **kwargs):\n        \"\"\"Adds a shapefile layer to the map.\n\n        Args:\n            data (str): Path to the shapefile.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_gdf(self, gdf, **kwargs):\n        \"\"\"Adds a GeoDataFrame layer to the map.\n\n        Args:\n            gdf (GeoDataFrame): The GeoDataFrame to be added to the map.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n        \"\"\"\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, **kwargs)\n\n    def add_raster(self, filepath, colormap=\"RdYlBu_11\", opacity=1.0, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            filepath (str): Path to the raster file.\n            **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        client = ipyleaflet.TileLayer(filepath)\n        tile_layer = get_leaflet_tile_layer(\n            client, colormap=colormap, opacity=opacity, **kwargs\n        )\n\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(self, image, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Adds an image overlay to the map.\n\n        Args:\n            image (str): Path to the image file.\n            bounds (list): Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].\n            **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n\n        Raises:\n            ValueError: If the bounds are not provided.\n        \"\"\"\n        from ipyleaflet import ImageOverlay\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        layer = ImageOverlay(url=image, bounds=bounds, opacity=opacity, **kwargs)\n        self.add(layer)\n\n    def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Adds a video overlay to the map.\n\n        Args:\n            video (str): Path to the video file.\n            bounds (list): Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].\n            **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n\n        Raises:\n            ValueError: If the bounds are not provided.\n        \"\"\"\n        from ipyleaflet import VideoOverlay\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        layer = VideoOverlay(url=video, bounds=bounds, opacity=opacity, **kwargs)\n        self.add(layer)\n\n    def add_WMS_layer(\n        self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Adds a WMS layer to the map.\n\n        Args:\n            WMSLayer (str): URL of the WMS layer.\n            **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n\n        Raises:\n            ValueError: If the WMSLayer is not found.\n        \"\"\"\n        from ipyleaflet import WMSLayer\n\n        try:\n            layer = WMSLayer(\n                url=url,\n                layers=layers,\n                name=name,\n                format=format,\n                transparent=transparent,\n                **kwargs,\n            )\n            self.add(layer)\n        except:\n            raise ValueError(f\"WMS Layer '{layer}' not found.\")\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object, inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Initial center of the map [latitude, longitude].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Initial zoom level of the map.</p> <code>2</code> <code>height</code> <code>str</code> <p>Height of the map in CSS units (e.g., \"600px\").</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to ipyleaflet.Map.</p> <code>{}</code> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"\n    Initializes the Map object, inherits from ipyleaflet.Map.\n\n    Args:\n        center (list): Initial center of the map [latitude, longitude].\n        zoom (int): Initial zoom level of the map.\n        height (str): Height of the map in CSS units (e.g., \"600px\").\n        **kwargs: Additional keyword arguments to pass to ipyleaflet.Map.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n    self.scroll_wheel_zoom = True\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_WMS_layer","title":"<code>add_WMS_layer(self, url, layers, name, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>WMSLayer</code> <code>str</code> <p>URL of the WMS layer.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.WMSLayer layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the WMSLayer is not found.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_WMS_layer(\n    self, url, layers, name, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Adds a WMS layer to the map.\n\n    Args:\n        WMSLayer (str): URL of the WMS layer.\n        **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n\n    Raises:\n        ValueError: If the WMSLayer is not found.\n    \"\"\"\n    from ipyleaflet import WMSLayer\n\n    try:\n        layer = WMSLayer(\n            url=url,\n            layers=layers,\n            name=name,\n            format=format,\n            transparent=transparent,\n            **kwargs,\n        )\n        self.add(layer)\n    except:\n        raise ValueError(f\"WMS Layer '{layer}' not found.\")\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap', **kwargs)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>The name of the basemap to be added. Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to ipyleaflet.TileLayer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the provided basemap_name is not found.</p> <p>Returns:</p> Type Description <code>None</code> <p>Adds the basemap to the map.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\", **kwargs):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n        basemap_name (str): The name of the basemap to be added.\n            Examples: 'OpenStreetMap', 'Esri.WorldImagery', 'OpenTopoMap'.\n        **kwargs: Additional keyword arguments to pass to ipyleaflet.TileLayer.\n\n    Raises:\n        ValueError: If the provided basemap_name is not found.\n\n    Returns:\n        None: Adds the basemap to the map.\n    \"\"\"\n    import xyzservices\n\n    try:\n        xyzservices_return = eval(f\"ipyleaflet.basemaps.{basemap}\")\n        if type(xyzservices_return) == xyzservices.lib.TileProvider:\n            url = xyzservices_return.build_url()\n        elif type(xyzservices_return) == xyzservices.lib.Bunch:\n            subset = kwargs.get(\"subset\")\n            if subset is None:\n                subset = list(xyzservices_return.keys())[0]\n            url = eval(f\"ipyleaflet.basemaps.{basemap}.{subset}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap + subset)\n        self.add(layer)\n    except:\n        raise ValueError(f\"Basemap '{basemap}' not found in ipyleaflet basemaps.\")\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, options=None, position='topright')</code>","text":"<p>Adds a GUI for selecting basemaps to the map.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>list</code> <p>List of available basemaps to choose from. If None, defaults to a predefined list.</p> <code>None</code> <code>position</code> <code>str</code> <p>Position of the widget on the map. Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.</p> <code>'topright'</code> <p>Behavior</p> <ul> <li>A toggle button to show/hide the dropdown and close button.</li> <li>A dropdown menu to select the basemap.</li> <li>A close button to remove the widget from the map.</li> </ul> <p>Events handlers:     - <code>on_toggle_change</code>: Toggles the visibility of the dropdown and close button.     - <code>on_button_click</code>: Closes the widget when the close button is clicked.     - <code>on_dropdown_change</code>: Changes the basemap when a new option is selected.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):\n    \"\"\"\n    Adds a GUI for selecting basemaps to the map.\n    Args:\n        options (list): List of available basemaps to choose from.\n            If None, defaults to a predefined list.\n        position (str): Position of the widget on the map.\n            Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.\n\n    Behavior:\n        - A toggle button to show/hide the dropdown and close button.\n        - A dropdown menu to select the basemap.\n        - A close button to remove the widget from the map.\n\n    Events handlers:\n        - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n        - `on_button_click`: Closes the widget when the close button is clicked.\n        - `on_dropdown_change`: Changes the basemap when a new option is selected.\n    \"\"\"\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        button_style=\"\",\n        tooltip=\"Click me\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    dropdown = widgets.Dropdown(\n        options=options,\n        value=options[0],\n        description=\"Basemap: \",\n        style={\"description_width\": \"initial\"},\n    )\n    dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n    button = widgets.Button(\n        icon=\"times\",\n    )\n    button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    hbox = widgets.HBox([toggle, dropdown, button])\n\n    def on_toggle_change(change):\n        if change[\"new\"]:\n            hbox.children = [toggle, dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        hbox.close()\n        toggle.close()\n        dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    def on_dropdown_change(change):\n        if change[\"new\"]:\n            self.layers = self.layers[:-2]\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_dropdown_change, names=\"value\")\n\n    control = ipyleaflet.WidgetControl(weidth=hbox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_gdf","title":"<code>add_gdf(self, gdf, **kwargs)</code>","text":"<p>Adds a GeoDataFrame layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>The GeoDataFrame to be added to the map.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_gdf(self, gdf, **kwargs):\n    \"\"\"Adds a GeoDataFrame layer to the map.\n\n    Args:\n        gdf (GeoDataFrame): The GeoDataFrame to be added to the map.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n    \"\"\"\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_geojson","title":"<code>add_geojson(self, data, hover_style=None, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The GeoJson data. Can be a file path (str) or a dictionary.</p> required <code>hover_style</code> <code>dict</code> <p>Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}</p> <code>None</code> <code>**kwargs</code> <p>Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_geojson(self, data, hover_style=None, **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str or dict): The GeoJson data. Can be a file path (str) or a dictionary.\n        hover_style (dict, optional): Style to apply when hovering over features. Defaults to {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n        **kwargs: Additinoal keyword arguments for the ipyleaflet.GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson = data\n    layer = ipyleaflet.GeoJSON(data=geojson, hover_style=hover_style, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_google_maps","title":"<code>add_google_maps(self, map_type='ROADMAP')</code>","text":"<p>Adds Google Maps basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>The type of Google Maps to be added. Options: 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN'.</p> <code>'ROADMAP'</code> <p>Returns:</p> Type Description <code>None</code> <p>Adds the Google Maps basemap to the map.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_google_maps(self, map_type=\"ROADMAP\"):\n    \"\"\"\n    Adds Google Maps basemap to the map.\n\n    Args:\n        map_type (str): The type of Google Maps to be added.\n            Options: 'ROADMAP', 'SATELLITE', 'HYBRID', 'TERRAIN'.\n\n    Returns:\n        None: Adds the Google Maps basemap to the map.\n    \"\"\"\n    map_types = {\n        \"ROADMAP\": \"m\",\n        \"SATELLITE\": \"s\",\n        \"HYBRID\": \"y\",\n        \"TERRAIN\": \"p\",\n    }\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Maps\")\n    self.add(layer)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_image","title":"<code>add_image(self, image, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>Path to the image file.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.ImageOverlay layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the bounds are not provided.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_image(self, image, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Adds an image overlay to the map.\n\n    Args:\n        image (str): Path to the image file.\n        bounds (list): Bounds of the image in the format [[lat1, lon1], [lat2, lon2]].\n        **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n\n    Raises:\n        ValueError: If the bounds are not provided.\n    \"\"\"\n    from ipyleaflet import ImageOverlay\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    layer = ImageOverlay(url=image, bounds=bounds, opacity=opacity, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map to manage different layers.</p> <p>Returns:</p> Type Description <code>None</code> <p>Adds a layer control widget to the map.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the map to manage different layers.\n\n    Args:\n        None\n\n    Returns:\n        None: Adds a layer control widget to the map.\n    \"\"\"\n    layer_control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(layer_control)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_raster","title":"<code>add_raster(self, filepath, colormap='RdYlBu_11', opacity=1.0, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the raster file.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.ImageOverlay layer.</p> <code>{}</code> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_raster(self, filepath, colormap=\"RdYlBu_11\", opacity=1.0, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        filepath (str): Path to the raster file.\n        **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    client = ipyleaflet.TileLayer(filepath)\n    tile_layer = get_leaflet_tile_layer(\n        client, colormap=colormap, opacity=opacity, **kwargs\n    )\n\n    self.add(tile_layer)\n    self.center = client.center()\n    self.zoom = client.default_zoom\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_shp","title":"<code>add_shp(self, data, **kwargs)</code>","text":"<p>Adds a shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Path to the shapefile.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_shp(self, data, **kwargs):\n    \"\"\"Adds a shapefile layer to the map.\n\n    Args:\n        data (str): Path to the shapefile.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    gdf = gdf.to_crs(epsg=4326)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, **kwargs)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds vector data (GeoJSON/Shapefile) to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or GeoDataFrame</code> <p>The vector data to be added to the map. Can be a file path (str) or a GeoDataFrame.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the GeoJSON layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data type is invalid.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"\n    Adds vector data (GeoJSON/Shapefile) to the map.\n\n    Args:\n        data (str or GeoDataFrame): The vector data to be added to the map.\n            Can be a file path (str) or a GeoDataFrame.\n        **kwargs: Additional keyword arguments for the GeoJSON layer.\n\n    Raises:\n        ValueError: If the data type is invalid.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        self.add_gdf(gdf, **kwargs)\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_gdf(data, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, **kwargs)\n    else:\n        raise ValueError(\"Invalid data type.\")\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_video","title":"<code>add_video(self, video, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Adds a video overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>Path to the video file.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.VideoOverlay layer.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the bounds are not provided.</p> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Adds a video overlay to the map.\n\n    Args:\n        video (str): Path to the video file.\n        bounds (list): Bounds of the video in the format [[lat1, lon1], [lat2, lon2]].\n        **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n\n    Raises:\n        ValueError: If the bounds are not provided.\n    \"\"\"\n    from ipyleaflet import VideoOverlay\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    layer = VideoOverlay(url=video, bounds=bounds, opacity=opacity, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"gtlparser/#gtlparser.gtlparser.Map.add_widget","title":"<code>add_widget(self, widget, position='topright', **kwargs)</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>ipywidgets.Widget</code> <p>The widget to be added to the map.</p> required <code>position</code> <code>str</code> <p>Position of the widget on the map. Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.</p> <code>'topright'</code> <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.WidgetControl.</p> <code>{}</code> Source code in <code>gtlparser/gtlparser.py</code> <pre><code>def add_widget(self, widget, position=\"topright\", **kwargs):\n    \"\"\"\n    Adds a widget to the map.\n\n    Args:\n        widget (ipywidgets.Widget): The widget to be added to the map.\n        position (str): Position of the widget on the map.\n            Options: 'topleft', 'topright', 'bottomleft', 'bottomright'.\n        **kwargs: Additional keyword arguments for ipyleaflet.WidgetControl.\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n    self.add(control)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install gtlparser, run this command in your terminal:</p> <pre><code>pip install gtlparser\n</code></pre> <p>This is the preferred method to install gtlparser, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install gtlparser from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/GGweelplay/gtlparser\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use gtlparser in a project:</p> <pre><code>import gtlparser\n</code></pre>"},{"location":"examples/foliumap/","title":"Foliumap","text":"In\u00a0[1]: Copied! <pre>import gtlparser\nfrom gtlparser import foliumap\n</pre> import gtlparser from gtlparser import foliumap In\u00a0[2]: Copied! <pre>cool_map = foliumap.Map()\n</pre> cool_map = foliumap.Map() In\u00a0[3]: Copied! <pre>cool_map.add_basemap(basemap=\"Cartodb Positron\")\ncool_map.add_basemap(basemap=\"OpenStreetMap\")\n</pre> cool_map.add_basemap(basemap=\"Cartodb Positron\") cool_map.add_basemap(basemap=\"OpenStreetMap\") In\u00a0[4]: Copied! <pre>cool_map.add_vector(\n    \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\n)\n</pre> cool_map.add_vector(     \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" ) In\u00a0[5]: Copied! <pre>cool_map.add_layer_control()\n</pre> cool_map.add_layer_control() In\u00a0[6]: Copied! <pre>cool_map\n</pre> cool_map Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>m = foliumap.Map(height=600, location=[39.4948, -108.5492], zoom_start=10)\nm.add_split_map()\nm\n</pre> m = foliumap.Map(height=600, location=[39.4948, -108.5492], zoom_start=10) m.add_split_map() m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/foliumap/#folium-demo","title":"Folium Demo\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import gtlparser\n</pre> import gtlparser In\u00a0[2]: Copied! <pre>gtlparser.__version__\n</pre> gtlparser.__version__ Out[2]: <pre>'0.1.1'</pre> In\u00a0[3]: Copied! <pre>import gtlparser\n</pre> import gtlparser In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import gtlparser\n</pre> import gtlparser In\u00a0[2]: Copied! <pre>cool_map = gtlparser.Map()\n</pre> cool_map = gtlparser.Map() In\u00a0[3]: Copied! <pre>cool_map.add_basemap(basemap=\"OpenStreetMap\")\n</pre> cool_map.add_basemap(basemap=\"OpenStreetMap\") In\u00a0[4]: Copied! <pre>cool_map.add_google_maps()\n</pre> cool_map.add_google_maps() In\u00a0[5]: Copied! <pre>cool_map.add_vector(\n    \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\n)\n</pre> cool_map.add_vector(     \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" ) In\u00a0[6]: Copied! <pre>cool_map.add_layer_control()\n</pre> cool_map.add_layer_control() In\u00a0[7]: Copied! <pre># Show the map\ncool_map\n</pre> # Show the map cool_map Out[7]:"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""}]}